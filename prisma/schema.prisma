// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  default
  admin
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  password    String        @db.Char(100)
  fullname    String
  email       String        @unique
  phone       String        @db.Char(10)
  role        Role          @default(default)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Course      Course[]
  LearnCourse LearnCourse[]

  @@index([username, fullname, email, phone])
}

model Course {
  id              String        @id @default(uuid())
  authorId        String
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  name            String        @unique
  slug            String        @unique
  image           String
  description     String        @db.VarChar(255)
  detail          String        @db.LongText
  levels          Level[]
  metaSiteName    String
  metaKeywords    String
  metaTitle       String
  metaDescription String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          Int           @db.TinyInt()
  vocabularies    Vocabulary[]
  LearnCourse     LearnCourse[]

  @@index([name])
}

model Level {
  id           String       @id @default(uuid())
  courseId     String
  Course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  name         String
  slug         String
  description  String       @db.VarChar(255)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  vocabularies Vocabulary[]
  LearnLevel   LearnLevel[]

  @@index([name])
}

model Vocabulary {
  id              String            @id @default(uuid())
  courseId        String
  course          Course            @relation(fields: [courseId], references: [id])
  levelId         String
  level           Level             @relation(fields: [levelId], references: [id], onDelete: Cascade)
  english         String            @default("")
  vietnamese      String            @default("")
  audio           String            @default("")
  pronunciation   String            @default("")
  partsOfSpeech   String            @default("")
  image           String            @default("")
  video           String            @default("")
  detail          String            @default("")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  LearnVocabulary LearnVocabulary[]

  @@index([english, vietnamese])
}

model Target {
  id          String        @id @default(uuid())
  name        String
  scores      Int
  LearnCourse LearnCourse[]

  @@index([name])
}

model LearnCourse {
  id              String            @id @default(uuid())
  userId          String
  learner         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course            @relation(fields: [courseId], references: [id])
  targetId        String            @default("")
  target          Target            @relation(fields: [targetId], references: [id])
  streak          Int               @default(0)
  isDefault       Int               @default(0) @db.TinyInt()
  LearnLevel      LearnLevel[]
  LearnVocabulary LearnVocabulary[]
  Scores          Scores[]
  Streak          Streak[]
}

model LearnLevel {
  id              String            @id @default(uuid())
  learnCourseId   String
  learnCourse     LearnCourse       @relation(fields: [learnCourseId], references: [id], onDelete: Cascade)
  levelId         String
  level           Level             @relation(fields: [levelId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  LearnVocabulary LearnVocabulary[]
}

model LearnVocabulary {
  id            String      @id @default(uuid())
  learnCourseId String
  learnCourse   LearnCourse @relation(fields: [learnCourseId], references: [id], onDelete: Cascade)
  learnLevelId  String
  learnLevel    LearnLevel  @relation(fields: [learnLevelId], references: [id], onDelete: Cascade)
  vocabularyId  String
  vocabulary    Vocabulary  @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  memory        Int         @default(5)
  wrong         Int         @default(0)
}

model Scores {
  id            String      @id @default(uuid())
  learnCourseId String
  learnCourse   LearnCourse @relation(fields: [learnCourseId], references: [id], onDelete: Cascade)
  scores        Int
  createdAt     DateTime    @default(now())
}

model Streak {
  id            String      @id @default(uuid())
  learnCourseId String
  learnCourse   LearnCourse @relation(fields: [learnCourseId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @db.Date
}
